## RadioNode Tool by ethtoja
## Currently supported functions:
## Add new port on Digital Unit
## Add new FieldReplaceableUnit RADIO
## Add new Rilink
## Add new sector from scratch ( Port, Rilink, Antennaunitgroup etc...)
## Listing Rilinks, LTE cells, Digital Unit Ports

lt all

$RU_rfport = 0
$RU_add = 0

####### Function declaration parts start here ##################

function BUILD_Menus

 !echo '********* RadioNode Builder by ethtoja *****************' >> tmenu_main.txt
 !echo '*                                                      *' >> tmenu_main.txt
 !echo '* 1. List defined RiLinks                              *' >> tmenu_main.txt
 !echo '* 2. List defined LTE cell data                        *' >> tmenu_main.txt
 !echo '* 3. List Digital Unit Ports                           *' >> tmenu_main.txt
 !echo '* 4. Create Digital Unit ports                         *' >> tmenu_main.txt
 !echo '* 5. Add new FieldReplacable Unit RADIO                *' >> tmenu_main.txt
 !echo '* 6. Define RiLinks on existing ports                  *' >> tmenu_main.txt
 !echo '* 7. Add new sector with Antenna and RfBranch          *' >> tmenu_main.txt
 !echo '* 8. Add Ports,RRU,Rilink,Sector                       *' >> tmenu_main.txt
 !echo '*                                                      *' >> tmenu_main.txt
 !echo '* Enter q for quit                                     *' >> tmenu_main.txt
 !echo '********* RadioNode Builder by ethtoja *****************' >> tmenu_main.txt
 'echo ' ' >> tmenu_main.txt

endfunc

function display_rilink
 s+
 ma rilink_list Equipment=1,RiLink=
  for $mo in rilink_list
  $rilink = ldn($mo)
  get $mo riPortRef1 > $ref1
  get $mo riPortRef2 > $ref2
  $split_separator = ,
  $rilink1 = split($rilink)
  $ref11 = split($ref1)
  $ref22 = split($ref2)
  $split_separator = =
  $ref3 = split($ref11[1])
  $ref4 = split($ref22[1])
  !echo $ref3[2]" +++ "$ref11[2]" <-- "$rilink1[2]" --> "$ref22[2]" +++ "$ref4[2] >> rilink_list.log
 done
endfunc
 
function list_cell_config
s+
 ma defined_cells ENodeBFunction=1,EUtranCellFDD=
 for $mo in defined_cells
  get $mo eUtranCellFDDId > $cell  
  get $mo ^cellid$ > $cell_ID
  get $mo physicalLayerSubCellId > $sub_cellid
  get $mo physicalLayerCellIdGroup > $group_cellid
  get $mo physicalLayerCellId$ > $phy_cellid
  get $mo arfcndl$ > $cell_arfcn
  get $mo dlChannelBandwidth > $cell_BW
  !echo "--------------------------------------------------"  >> temp_cell_list.log
  !echo "Cell name ----------------- "$cell >> temp_cell_list.log
  !echo "Cell ID ------------------- "$cell_ID  >> temp_cell_list.log
  !echo "physicalLayerCellIdGroup -- "$group_cellid  >> temp_cell_list.log
  !echo "physicalLayerSubCellId ---- "$sub_cellid  >> temp_cell_list.log
  !echo "physicalLayerCellId ------- "$phy_cellid  >> temp_cell_list.log
  !echo "arfdn DL ------------------ "$cell_arfcn  >> temp_cell_list.log
  !echo "dlChannelBandwidth -------- "$cell_BW  >> temp_cell_list.log
  !echo "--------------------------------------------------"  >> temp_cell_list.log
done
endfunc
 
function list_DU_ports

 !echo '************** Free Digital Unit Ports ***************' >> tmenu_not_reserved_ports.log
 !echo ' '  >> tmenu_not_reserved_ports.log
 !echo '************** Reserved Digital Unit Ports ***************' >> tmenu_reserved_ports.log
 !echo ' '  >> tmenu_reserved_ports.log


 get NodeSupport=1,MpClusterHandling=1 primaryCoreRef > $currentDU
 ma defined_DU_port $currentDU,RiPort=
 $split_separator = ,

 $found_candidate = 0
 for $mo in defined_DU_port
  $temp = ldn($mo)
  get $mo reservedby > $reservation
  $temp1 = split($reservation)
  if $temp1[2] ~ RiLink
   !echo $temp "is reserved: "$temp1[2] >> tmenu_reserved_ports.log
   else
   !echo $temp "is NOT reserved  - can be used for expansion " >> tmenu_not_reserved_ports.log
   $found_candidate = 1
  fi
 done

 if $found_candidate = 0
  !echo "No free ports have been found" >> tmenu_not_reserved_ports.log
  !echo "Please define a new one if possible" >> tmenu_not_reserved_ports.log
 fi

 !echo ' '  >> tmenu_not_reserved_ports.log
 !echo '**********************************************' >> tmenu_not_reserved_ports.log
 !echo ' '  >> tmenu_reserved_ports.log
 !cat tmenu_reserved_ports.log tmenu_not_reserved_ports.log >> tmenu_DU_ports.log
 !rm tmenu_not_reserved_ports.log
 !rm tmenu_reserved_ports.log

endfunc
 
function ADD_du_port

 get Equipment=1,FieldReplaceableUnit=BB-1
 get NodeSupport=1,MpClusterHandling=1 primaryCoreRef > $du_ref
 pr $du_ref,riport=
 $port_add = readinput(Please enter port to add to digital unit: )
 pr $du_ref,Riport=$port_add
 if $nr_of_mos = 0
  cr $du_ref,Riport=$port_add
  pr  $du_ref,Riport=$port_add
  st  $du_ref,Riport=$port_add
 else
	$abc = readinput(This port already defined - HIT ENTER)
 fi
 
endfunc

function ADD_radio_HW

 get NodeSupport=1,MpClusterHandling=1 primaryCoreRef > $du_ref
 ma Radio_Units Equipment=1,FieldReplaceableUnit=
 mr Radio_Units $du_ref
 pr Radio_Units
 $RU_add = readinput(Please enter the Radio Unit name to be added: )
 pr Equipment=1,FieldReplaceableUnit=$RU_add
 if $nr_of_mos = 0
  cr Equipment=1,FieldReplaceableUnit=$RU_add
  cr Equipment=1,FieldReplaceableUnit=$RU_add,Riport=DATA_1
  cr Equipment=1,FieldReplaceableUnit=$RU_add,Riport=DATA_2
  $RU_rfport = readinput(Please enter the number of RF ports of this Radio: )

## currently up to 4 ports are supported by this script
  $port[1] = A
  $port[2] = B
  $port[3] = C
  $port[4] = D

  $i = 1
  for $RU_rfport
   cr Equipment=1,FieldReplaceableUnit=$RU_add,RfPort=$port[$i]
   $i = $i + 1
  done
 else
	$abc = readinput(This RADIO is already defined - HIT ENTER)
 fi
 lpr Equipment=1,FieldReplaceableUnit=$RU_add
 
endfunc

function ADD_rilink

 pr Equipment=1,RiLink=
 $rilink_name = readinput(Please give me the Rilink name: )
 lt root
 lt all
 ma empty_Riport  Equipment=1,FieldReplaceableUnit=.*,Riport= reservedby 0
 pr empty_Riport
 $Riport_ID1 = readinput(Please enter proxy of the RilinkRef 1 - )
 $Riport_ID2 = readinput(Please enter proxy of the RilinkRef 2 - )
 $Riport_MO1 = ldn($Riport_ID1)
 $Riport_MO2 = ldn($Riport_ID2)

## Create Rilink 
 pr Equipment=1,RiLink=$rilink_name
 if $nr_of_mos = 0
  gs+
  crn Equipment=1,RiLink=$rilink_name
  riPortRef1 $Riport_MO1
  riPortRef2 $Riport_MO2
  end
  gs-
 else
  $abc = readinput(This RILINK is already defined - HIT ENTER)
 fi
## Create Rilink  end

 st $du_ref,Riport=$port_add
 lst Equipment=1,FieldReplaceableUnit=$RU_add
 st Equipment=1,RiLink=$rilink_name
 st NodeSupport=1,SectorEquipmentFunction=

endfunc

function ADD_ant_sector

 $port[1] = A
 $port[2] = B
 $port[3] = C
 $port[4] = D

 if $RU_add = 0
  get NodeSupport=1,MpClusterHandling=1 primaryCoreRef > $du_ref
  ma Radio_Units Equipment=1,FieldReplaceableUnit=
  mr Radio_Units $du_ref
  pr Radio_Units
  $abc = readinput(Please enter proxy number of the radio to be used for this sector)
  get $abc fieldReplaceableUnitId > $RU_add
  lpr FieldReplaceableUnit=$RU_add,Rfport=
  $RU_rfport = $nr_of_mos
 fi
 st NodeSupport=1,SectorEquipmentFunction=
 $sec_num = readinput(Enter sectorNumber: )
 pr AntennaUnitGroup=.*,RfBranch=
 $RfBranch_name = readinput(Please enter the RfBranch Naming name Convention: )
 pr AntennaSubunit=
 $ant_sub = readinput(Please Enter Antenna Subunit name: )
 
 cr Equipment=1,AntennaUnitGroup=$sec_num
 cr Equipment=1,AntennaUnitGroup=$sec_num,AntennaUnit=1
 cr Equipment=1,AntennaUnitGroup=$sec_num,AntennaUnit=1,AntennaSubunit=$ant_sub
 
 $i = 1
 for $RU_rfport
  cr Equipment=1,AntennaUnitGroup=$sec_num,AntennaUnit=1,AntennaSubunit=$ant_sub,AuPort=$i
  $i = $i + 1
 done

## need to initialize variable $allbranch with value,becase empy init cause problems
 $allbranch = abc
 $i = 1

 for $RU_rfport
  confb
  cr Equipment=1,AntennaUnitGroup=$sec_num,RfBranch=$RfBranch_name-$i
  $allbranch = $allbranch Equipment=1,AntennaUnitGroup=$sec_num,RfBranch=$RfBranch_name-$i
  set Equipment=1,AntennaUnitGroup=$sec_num,RfBranch=$RfBranch_name-$i rfPortRef Equipment=1,FieldReplaceableUnit=$RU_add,Rfport=$port[$i]
  set Equipment=1,AntennaUnitGroup=$sec_num,RfBranch=$RfBranch_name-$i auPortRef Equipment=1,AntennaUnitGroup=$sec_num,AntennaUnit=1,AntennaSubunit=$ant_sub,AuPort=$i
  $i = $i + 1
  confb
 done

 $allbranch = $allbranch -s abc

 confb
 cr NodeSupport=1,SectorEquipmentFunction=$sec_num
 set NodeSupport=1,SectorEquipmentFunction=$sec_num rfBranchRef $allbranch
 confb
endfunc

####### Function declaration parts end ##################
 
####################### Following FUNCTIONS are declared above #######################
 
## display_rilink
## list_cell_config
## list_DU_ports
## ADD_du_port
## ADD_radio_HW
## ADD_rilink
## ADD_ant_sector
## BUILD_Menus

####################### END OF FUNCTION LIST #######################

BUILD_Menus
for ever
	!cat tmenu_main.txt
	$choice = readinput(Please select a menuitem above: )
	if $choice = 1
	 display_rilink
	 !cat rilink_list.log
	 $temp = readinput(HIT ENTER TO CONTINUE)
	 !rm rilink_list.log
	fi
	if $choice = 2
	 list_cell_config
	 !cat temp_cell_list.log
	 $temp = readinput(HIT ENTER TO CONTINUE)
	 !rm temp_cell_list.log
	fi
	if $choice = 3
	 list_DU_ports
	 !cat tmenu_DU_ports.log
	 $temp = readinput(HIT ENTER TO CONTINUE)
	 !rm tmenu_DU_ports.log
	fi
	if $choice = 4
	 ADD_du_port
	fi
	if $choice = 5
	 ADD_radio_HW
	fi
	if $choice = 6
	 ADD_rilink
	fi
	if $choice = 7
	 ADD_ant_sector
	fi
	if $choice = 8
	 ADD_du_port
	 ADD_radio_HW
	 ADD_rilink
	 ADD_ant_sector
	fi
	if $choice = q
		break
	fi
done
!rm tmenu_main.txt
