#This script was written for cloning existing configuration to Yaml file.
#Script written by ethtoja
#Just run a script in a msrbs or VDU moshell and it produces the RAN part of the yaml file.
#E.g runx CloneToYaml.mos
#Not a perfect product check the result carefully :) 
#V1.0 - Supported cloning function for EnodeB: eutrancell,eutranfreq and relation,gutrancell,gutranfreq,gutrancellrelation,rgw,tls,
# Limitations:
# - Discovery service hardcoded
# - VDU plmn hardcoded to 262 80
#2022 December 19 - V1.5 added VDU support
#2023 February 22 - V1.5.1 corrected ESS ID state check
#2023 March 1 - V1.6 now supports SA on VDU and new parameters ulAvailableCrbs,dlAvailableCrbs,ssWithRmLteSyncSigPbchEnabled,dftSOfdmPuschEnabled1,dftSOfdmMsg3Enabled
#2023 March 9 - V1.61 bugfix: introduces $print_att variable to print string attribute correctly
#2023 Marc 24 - V1.7 VCU CP support added with:
#               IPCA for external rel supported
#               quitable 9 hardcoded
#               eutrancellrelation supported

$version = 1.7v
s+
#Variable initialization
$path1 = ~/CloneToYaml/

!if [ ! -d "$path1" ]; then
!    echo "Directory does not exist, creating directory..."
!    mkdir "$path1"
!fi

get 0 userLabel > $file1

function obtain_rilinks_from_RGW_to_RU
 !echo '++radio:' >> v1.txt
 $template = readfile(template.txt)
 pv $template
 ma rilink_group rilink riportref2 data
 mr rilink_group rilink riportref2 AIR
  for $mo in rilink_group
   get $mo riportref1 > $temp1
   get $mo riportref2 > $temp2
   $split_separator = ,
   $temp11 = split($temp1)
   $temp22 = split($temp2)
   pv $temp11
   pv $temp12
   $split_separator = =
   $fromFru1 = split($temp11[1])
   $fromFruPort1 = split($temp11[2])
   $fruId1 = split($temp22[1])
   $toPort1 = split($temp22[2])
   pv $fruId1[2]
   pv $fromFru1[2]
   pv $fromFruPort1[2]
   pv $toPort1[2]
   pr $fruId1[2],Rfport=
   $rfports = $nr_of_mosrfPorts
   pv $rfports
   !echo '++++- fruId: '$fruId1[2] >> v1.txt
   !echo '++++++type: "$rfports"' >> v1.txt
   !echo '++++++riLink:' >> v1.txt
   !echo '++++++++- fromFru: '$fromFru1[2] >> v1.txt
   !echo '++++++++++fromFruPort: '$fromFruPort1[2] >> v1.txt
   !echo '++++++++++toPort: '$toPort1[2] >> v1.txt
   !echo ''>> v1.txt
  done
endfunc

function obtain_sector_equipment
 !echo '++sectorequipmentfunc:' >> v1.txt
 ma sec_tor  NodeSupport=1,SectorEquipmentFunction=
  for $mo in sec_tor
   get $mo sectorEquipmentFunctionId > $secId
   get $mo rfbranchref > $temp1
   $temp1 = $temp1 -s .*=\x20 -g
   get $temp1 rfPortRef > $temp2 
   $temp2 = $temp2 -s  FieldReplaceableUnit=   
   $radioFru1 = $temp2 -s ,Rf.*
   !echo '++++- id: "$secId"' >> v1.txt
   !echo '++++++radioFru: '$radioFru1 >> v1.txt
   done
   !echo ''>> v1.txt
endfunc  

function obtain_eutrancell
 !echo '++cell:'>> v1.txt
 ma cells  ENodeBFunction=1,EUtranCellFDD=
 for $mo in cells
  get $mo eUtranCellFDDId > $id1
  get $mo earfcndl > $earfcndl1
  get $mo earfcnul > $earfcnul1
  get $mo ^tac$ > $tac1
  get $mo physicalLayerCellIdGroup > $physicalLayerCellIdGroup1
  get $mo physicalLayerSubCellId > $physicalLayerSubCellId1
  get $mo dlChannelBandwidth > $dlChannelBandwidth1
  get $mo ulChannelBandwidth > $ulChannelBandwidth1
  get $mo sectorCarrierRef > $temp1
  $carrier_ref = $temp1 -s .*>.*Function=1, -g
  get ENodeBFunction=1,$carrier_ref configuredMaxTxPower > $configuredMaxTxPower1
  get ENodeBFunction=1,$carrier_ref sectorFunctionRef > $temp1
  get ENodeBFunction=1,$carrier_ref essScLocalId > $essScLocalId1
  get ENodeBFunction=1,$carrier_ref essScPairId > $essScPairId1
  get ENodeBFunction=1,$carrier_ref noOfTxAntennas > $noOfTxAntennas1
  get $temp1 sectorEquipmentFunctionId > $sectorEquipmentFuncId1  
  get $mo activePlmnList > $activePlmnList1
  get $mo userLabel > $userlabel1 
  !echo '++++- id: "$id1"' >> v1.txt
  if $noOfTxAntennas1 > 2
   !echo '++++++noOfRxAntennas: "$noOfTxAntennas1"' >> v1.txt
   !echo '++++++noOfTxAntennas: "$noOfTxAntennas1"' >> v1.txt
  fi
  !echo '++++++earfcndl: "$earfcndl1"' >> v1.txt
  !echo '++++++earfcnul: "$earfcnul1"' >> v1.txt
  !echo '++++++tac: "$tac1"' >> v1.txt
  get $mo essScLocalId > $essScLocalId1
  if $essScLocalId1 > 0
   !echo '++++++essScLocalId: "$essScLocalId1"' >> v1.txt
   !echo '++++++essScPairId: "$essScPairId1"' >> v1.txt
  fi 
  !echo '++++++physicalLayerCellIdGroup: "$physicalLayerCellIdGroup1"' >> v1.txt
  !echo '++++++physicalLayerSubCellId: "$physicalLayerSubCellId1"' >> v1.txt
  !echo '++++++dlChannelBandwidth: "$dlChannelBandwidth1"' >> v1.txt
  !echo '++++++ulChannelBandwidth: "$ulChannelBandwidth1"' >> v1.txt
  !echo '++++++sectorEquipmentFuncId: "$sectorEquipmentFuncId1"' >> v1.txt
  !echo '++++++configuredMaxTxPower: "$configuredMaxTxPower1"' >> v1.txt
  !echo '++++++userLabel: "$userlabel1"' >> v1.txt
  !echo '++++++mcc: "$activePlmnList1[mcc]"' >> v1.txt
  !echo '++++++mnc: "$activePlmnList1[mnc]"' >> v1.txt
 done
endfunc

function obtain_eutranfreq
 !echo ''>> v1.txt
 !echo '++eutranfreq:'>> v1.txt
 ma eFreq EUtraNetwork=1,EUtranFrequency=
 for $mo in eFreq
  get $mo eUtranFrequencyId > $id1
  get $mo arfcnValueEUtranDl > $arfcnValueEUtranDl1
  !echo '++++- id: "$id1"' >> v1.txt
  !echo '++++++arfcnValueEUtranDl: "$arfcnValueEUtranDl1"' >> v1.txt
 done
endfunc

function obtain_eutranfreqrelation1
 !echo ''>> v1.txt
 !echo '++eutranfreqrelation:' >> v1.txt
 ma freqs EUtraNetwork=.*,EUtranFrequency=
 mr freqs EUtraNetwork=.*,EUtranFrequency= reservedBy !EUtranFreqRelation
 for $mo in freqs
  get $mo reservedby > $temp1
  get $mo eUtranFrequencyId > $eUtranFrequencyId1
  !echo "$temp1" > reservedby.txt
  !cat reservedby.txt  | tail -n +2 | awk 'BEGIN {FS="= "}{print $2}' > reserved2.txt
  !rm reservedby.txt
  obtain_eutranfreqrelation2 $eUtranFrequencyId1
 done
endfunc

function obtain_eutranfreqrelation2
 
 $freqID = $1
 pv $freqID
 $relations = readfile(reserved2.txt)
 pv $relations
 for $lineNumber = 1 to $nr_of_lines
  $temp1 = $relations[$lineNumber]
  $split_separator = ,
  $temp2 = split($temp1)
  $split_separator = =
  $temp3 = split($temp2[2])
  $temp4 = split($temp2[3])  
  $cellId1 = $temp3[2]
  $id1 = $temp4[2]
  !echo '++++- id: "$id1"' >> v1.txt
  !echo '++++++cellId: "$cellId1"' >> v1.txt
  !echo '++++++eUtranFrequencyId: "$freqID"' >> v1.txt
  !echo '++++++cellReselectionPriority: "7"' >> v1.txt
  !rm reserved2.txt
 done
endfunc

function obtain_gutransignal
 !echo ''>> v1.txt
 !echo '++gssf:'>> v1.txt
 ma gutransig ENodeBFunction=1,GUtraNetwork=.*,GUtranSyncSignalFrequency=
 mr ENodeBFunction=1,GUtraNetwork=.*,GUtranSyncSignalFrequency= reservedBy [0]
 for $mo in gutransig
  get $mo gUtranSyncSignalFrequencyId > $gUtranSyncSignalFrequencyId1
  get $mo arfcn > $arfcn1
  get $mo ^band$ > $band1
  get $mo smtcDuration > $smtcDuration1
  get $mo smtcOffset > $smtcOffset1
  get $mo smtcPeriodicity > $smtcPeriodicity1
  get $mo smtcScs > $smtcScs1  
  !echo '++++- gUtranSyncSignalFrequencyId: "$gUtranSyncSignalFrequencyId1"' >> v1.txt
  !echo '++++++arfcn: "$arfcn1"' >> v1.txt
  !echo '++++++band: "$band1"' >> v1.txt
  !echo '++++++smtcDuration: "$smtcDuration1"' >> v1.txt
  !echo '++++++smtcOffset: "$smtcOffset1"' >> v1.txt
  !echo '++++++smtcPeriodicity: "$smtcPeriodicity1"' >> v1.txt
  !echo '++++++smtcScs: "$smtcScs1"' >> v1.txt
 done
endfunc

function obtain_ExternalGUtranCell
 !echo ''>> v1.txt
 !echo '++egutrancell:'>> v1.txt
 ma gutrancells ENodeBFunction=1,GUtraNetwork=.*,ExternalGNodeBFunction=.*,ExternalGUtranCell=
 for $mo in gutrancells
  get $mo externalGUtranCellId > $externalGUtranCellId1
  get $mo physicalLayerCellIdGroup > $physicalLayerCellIdGroup1
  get $mo physicalLayerSubCellId > $physicalLayerSubCellId1
  get $mo localCellId > $localCellId1
  get $mo gUtranSyncSignalFrequencyRef > $temp1
  $split_separator = =
  $temp2 = split($temp1)
  $gUtranSyncSignalFrequencyId1 = $temp2[3]
  !echo '++++- externalGUtranCellId: "$externalGUtranCellId1"' >> v1.txt
  !echo '++++++physicalLayerCellIdGroup: "$physicalLayerCellIdGroup1"' >> v1.txt
  !echo '++++++physicalLayerSubCellId: "$physicalLayerSubCellId1"' >> v1.txt
  !echo '++++++localCellId: "$localCellId1"' >> v1.txt
  !echo '++++++gUtranSyncSignalFrequencyId: "$gUtranSyncSignalFrequencyId1"' >> v1.txt
 done
endfunc

function obtain_gutranfreqrel
 !echo ''>> v1.txt
 !echo '++cellfreq:'>> v1.txt
 ma grel ENodeBFunction=1,EUtranCellFDD=.*,GUtranFreqRelation=
 $Id1 = 0
 for $mo in grel
  $Id1 = $Id1 + 1
  $temp = ldn($mo)
  $split_separator = ,
  $temp2 = split($temp)
  $Eutrancell = $temp2[2]
  get $Eutrancell eUtranCellFDDId > $cellId1
  get $mo gUtranFreqRelationId > $cellfreqId1
  get $mo gUtranSyncSignalFrequencyRef > $temp1
  $split_separator = =
  $temp2 = split($temp1)
  pv $temp2
  $gUtranSyncSignalFrequencyId1 = $temp2[3]
  !echo '++++- id: "$Id1"' >> v1.txt
  !echo '++++++cellId: "$cellId1"' >> v1.txt
  !echo '++++++cellfreqId: "$cellfreqId1"' >> v1.txt
  !echo '++++++gUtranSyncSignalFrequencyId: "$gUtranSyncSignalFrequencyId1"' >> v1.txt
 done
endfunc

function obtain_gutrancellrelation
 !echo ''>> v1.txt
 !echo '++cellrelation:'>> v1.txt
 ma grelcell ENodeBFunction=1,EUtranCellFDD=.*,GUtranFreqRelation=.*,GUtranCellRelation=
 $Id1 = 0
 for $mo in grelcell
  $Id1 = $Id1 + 1
  get $mo gUtranCellRelationId > $cellrelationId1
  $temp = ldn($mo)
  $split_separator = ,
  $temp2 = split($temp)
  get $temp2[2] eUtranCellFDDId > $cellId1
  get $temp2[2],$temp2[3] gUtranFreqRelationId > $cellfreqId1
  get $mo neighborCellRef > $temp
  $split_separator = =
  $temp2 = split($temp)
  $externalGUtranCellId1 = $temp2[4]
  get $mo essEnabled > $essEnabled1
  !echo '++++- id: "$Id1"' >> v1.txt
  !echo '++++++cellrelationId: "$cellrelationId1"' >> v1.txt
  !echo '++++++cellId: "$cellId1"' >> v1.txt
  !echo '++++++cellfreqId: "$cellfreqId1"' >> v1.txt
  !echo '++++++externalGUtranCellId: "$externalGUtranCellId1"' >> v1.txt
  !echo '++++++essEnabled: "$essEnabled1"' >> v1.txt
 done
endfunc

function obtain_rgw
 !echo ''>> v1.txt
 !echo '++rgw:'>> v1.txt
 ma RGW_hw Equipment=1,FieldReplaceableUnit=
 for $mo in RGW_hw
  get $mo productData > $temp
  if $temp[productName] !~ Gateway
   mr RGW_hw $mo 
  fi
 done
 get RGW_hw fieldReplaceableUnitId > $fruId1
 for $mo in RGW_hw
   $hw = ldn($mo)
 done
 $riPorts1 = empty
 ma rgw_riport $hw,riport=
 for $mo in rgw_riport
  get $mo riPortId > $riportId1
  if $riPorts1 = empty
   $riPorts1 = $riportId1
  else
   $riPorts1 = $riPorts1,$riportId1
  fi
 done
 $test = `echo "$riPorts1" | tr , "\n" | sort | tr "\n" ,`
 $riPorts1 = `echo "$test" | rev | cut -c 2- | rev`
 $split_separator = ,
 $hw1 = split($hw)
 ma rgw_rlink Equipment=1,RiLink= riPortRef2 $hw1[2],RiPort=
 pr rgw_rlink
 get FgwFunction=1,FgwControl=1 ipv6Address > $ipv6IpAddress1
 get  FgwFunction=1,FgwControl=1 transportRef > $vlan1
 get $vlan1 vlanId > $c2cVlan1
 get FgwFunction=1,FgwTermPoint= vlanPortRef > $vlan1
 get $vlan1 vlanId > $llscuVlan1
 for $mo in rgw_rlink
  get $mo riPortRef1 > $temp1
  get $temp1 riPortId > $fromFruPort1
  $temp2 = split($temp1)
  pv $temp2
  get $temp2[1] fieldReplaceableUnitId > $fromFru1
  get $mo riPortRef2 > $temp1
  get $temp1 riPortId > $toPort1
 done
 !echo '++++fruId: '$fruId1 >> v1.txt
 !echo '++++riPorts: $riPorts1' >> v1.txt
 !echo '++++ipv6IpAddress: "$ipv6IpAddress1"' >> v1.txt
 !echo '++++c2cVlan: "$c2cVlan1"' >> v1.txt
 !echo '++++llscuVlan: "$llscuVlan1"' >> v1.txt
 !echo '++++tlsName: online' >> v1.txt
 !echo '++++riLink:' >> v1.txt
 !echo '++++++- fromFru: "$fromFru1"' >> v1.txt
 !echo '++++++- fromFruPort: "$fromFruPort1"' >> v1.txt
 !echo '++++++- toPort: "$toPort1"' >> v1.txt
endfunc

function obtain_tls
 !echo ''>> v1.txt
 !echo '++tls:'>> v1.txt
 !echo '++++type: online'>> v1.txt
 !echo '++++name: online'>> v1.txt
 get SystemFunctions=1,SecM=1,CertM=1,EnrollmentServerGroup=.*,EnrollmentServer= uri > $EnrollmentServerUri1
 get SystemFunctions=1,SecM=1,CertM=1 reportProgress > $temp1
 $split_separator = \x20
 $temp2 = split($temp1[additionalInfo])
 $installTrustedCertFromUriUri = $temp2[6]
 get SecM=1,CertM=1,EnrollmentAuthority=.* enrollmentCaFingerprint > $fingerprint1
 get SecM=1,CertM=1,EnrollmentAuthority=.* enrollmentAuthorityName > $enrollmentAuthorityName1
 get SystemFunctions=1,SecM=1,CertM=1,NodeCredential= keyInfo > $temp1
 $temp2 = $temp1 -s ) -g
 $temp1 = $temp2 -s \( -g
 $temp2 = split($temp1)
 $keyInfo1 = $temp2[2]
 get SecM=1,CertM=1,NodeCredential= subjectName > $subjectName1
 !echo '++++EnrollmentServerUri: '$EnrollmentServerUri1 >> v1.txt
 !echo '++++installTrustedCertFromUriUri:' $installTrustedCertFromUriUri >> v1.txt
 !echo '++++fingerprint:' $fingerprint1 >> v1.txt
 !echo '++++enrollmentAuthorityName:' $enrollmentAuthorityName1 >> v1.txt
 !echo '++++keyInfo:' $keyInfo1 >> v1.txt
 !echo '++++subjectName:' $subjectName1 >> v1.txt
endfunc

function obtain_fgw_e5l_enb_exgnb

 !echo ''>> v1.txt
 !echo '++fgw:'>> v1.txt
 get FgwFunction=1,FgwService=1 ipv6Address > $ipv6IpAddress1
 !echo '++++ipv6IpAddress: "$ipv6IpAddress1"' >> v1.txt 
 get  FgwFunction=1,FgwService=1 transportRef > $temp1
 get $temp1 vlanid > $vlanId1
 get $temp1 encapsulation > $temp2
 $split_separator = =
 $temp3 = split($temp2)
 $port1 = $temp3[2]
 !echo '++++fgci:' >> v1.txt
 !echo '++++++vlanId: "$vlanId1"' >> v1.txt
 !echo '++++++port: "$port1"' >> v1.txt
 get FgwFunction=1,FgwTermPoint=1 vlanPortRef > $temp1
 get $temp1 vlanid > $vlanId1
 !echo '++++llscu:' >> v1.txt
 !echo '++++++vlanId: "$vlanId1"' >> v1.txt
 !echo '++++tlsname: online' >> v1.txt
 !echo ''>> v1.txt
 get ENodeBFunction=1,GUtraNetwork=1,ExternalGNodeBFunction= eNBVlanPortRef > $temp1
 get $temp1 vlanid > $vlanId1
 get $temp1 encapsulation > $temp2
 $split_separator = =
 $temp3 = split($temp2)
 $port1 = $temp3[2]
 !echo '++e5l:' >> v1.txt
 !echo '++++port: "$port1"' >> v1.txt
 !echo '++++vlanId: "$vlanId1"' >> v1.txt
 get ENodeBFunction=1 eNBId > $id1
 get ENodeBFunction=1 eNodeBPlmnId > $temp1
 $mcc1 = $temp1[mcc]
 $mnc1 = $temp1[mnc]
 !echo ''>> v1.txt
 !echo '++eNB:' >> v1.txt
 !echo '++++id: "$id1"' >> v1.txt
 !echo '++++mcc: "$mcc1"' >> v1.txt
 !echo '++++mnc: "$mnc1"' >> v1.txt
 get ENodeBFunction=1,GUtraNetwork=1,ExternalGNodeBFunction= gNodeBId$ > $id1
 get ENodeBFunction=1,GUtraNetwork=1,ExternalGNodeBFunction= gNodeBPlmnId$ > $temp1
 $mcc1 = $temp1[mcc]
 $mnc1 = $temp1[mnc]
 get ENodeBFunction=1,GUtraNetwork=1,ExternalGNodeBFunction=.*,TermPointToGNB= ipv6Address$ > $cucpAddress1
 get GNBDUFunction=1,TermPointToGNBCUCP= ipv6Address > $f1c1
 !echo ''>> v1.txt
 !echo '++exGNB:' >> v1.txt
 !echo '++++id: "$id1"' >> v1.txt
 !echo '++++mcc: "$mcc1"' >> v1.txt
 !echo '++++mnc: "$mnc1"' >> v1.txt
 !echo '++++cucpAddress: "$cucpAddress1"' >> v1.txt
 !echo '++++f1c: "$f1c1"' >> v1.txt
endfunc

function obtain_boards
 !echo ''>> v1.txt
 !echo '++boards:'>> v1.txt
 get NodeSupport=1,MpClusterHandling=1 primaryCoreRef > $field1
 get $field1 productData > $temp1
 $split_separator = \x20
 $temp2 = split($temp1[productName])
 $name1 = BB$temp2[2]
 ma riport_group $field1,riport=
 $riList2 = empty
 for $mo in riport_group
  get $mo riPortId > $riId1
   if  $riList2 = empty
    $riList2 = $riId1
   else
    $riList2 = $riList2,$riId1
   fi
 done 
 $test = `echo "$riList2" | tr , "\n" | sort | tr "\n" ,`
 $riList1 = `echo "$test" | rev | cut -c 2- | rev`
 !echo '++++- name: $name1' >> v1.txt
 !echo '++++++riport: $riList1' >> v1.txt
 !echo '++++++tnport:' >> v1.txt
 ma tng Equipment=1,$field1,TnPort=
 for $mo in tng
  get $mo tnPortId > $id1  
  get Transport=1,EthernetPort=$id1 autoNegEnable > $autoNeg1
  get Transport=1,EthernetPort=$id1 operOperatingMode > $temp2
  $temp2 = $temp2 -s ) -g
  $mode1 = $temp2 -s .*\x20\( -g
  !echo '++++++++- id: $id1' >> v1.txt
  !echo '++++++++++mode: "$mode1"' >> v1.txt
  !echo '++++++++++autoNeg: "$autoNeg1"' >> v1.txt
 done
 
endfunc

function obtain_oam_data
 get  SystemFunctions=1,SysM=1,OamAccessPoint=1 ^accessPoint$ > $oam_ip_class
 if $oam_ip_class ~ IPv4
  $ipStack1 = 4
 else  
  $ipStack1 = 6
 fi
 get $oam_ip_class
 $split_separator = ,
 $oam = split($oam_ip_class)
 get $oam_ip_class ^address$ > $oam_ip_address
 $split_separator = /
 $temp = split($oam_ip_address)
 $ipAddress1 = $temp[1]
 $ipAddressMask1 = $temp[2]
 get $oam[1],.*,nexthop= ^address$ > $defaultRouter01
 get $oam[1],$oam[2] encapsulation > $vlanport
 get $vlanport vlanid > $vlan1
 get $vlanport encapsulation > $temp
 $split_separator = =
 $temp1 = split($temp)
 pv $temp1
 $port1 = $temp1[2]
 !echo ''>> v1.txt
 !echo '++oam:'>> v1.txt
 !echo '++++ipStack: '$ipStack1 >> v1.txt
 !echo '++++port: '$port1 >> v1.txt
 !echo '++++vlan: "$vlan1"' >> v1.txt
 !echo '++++ipAddressMask: "$ipAddressMask1"' >> v1.txt
 !echo '++++defaultRouter0: '$defaultRouter01 >> v1.txt
 !echo '++++ipAddress: '$ipAddress1 >> v1.txt
 endfunc

function obtain_s1

 get ENodeBFunction=1 sctpRef > $temp
 get $temp localIpAddress > $temp2
 $temp2 = $temp2 -s .*Transport=1,
 if $temp2 ~ IPv4
  $ipStack1 = 4
 else
  $ipStack1 = 6
 fi
 $split_separator = ,
 $s1 = split($temp2)
 get $temp2 ^address$ > $s1_ip_address
 $split_separator = /
 $temp = split($s1_ip_address)
 $ipAddress1 = $temp[1]
 $ipAddressMask1 = $temp[2]
 get $s1[1],.*,nexthop= ^address$ > $defaultRouter01
 
 get $s1[1],$s1[2] encapsulation > $vlanport
 get $vlanport vlanid > $vlan1
 get $vlanport encapsulation > $temp
 $split_separator = =
 $temp1 = split($temp)
 pv $temp1
 $port1 = $temp1[2]
 !echo '' >> v1.txt
 !echo '++s1:'>> v1.txt
 !echo '++++ipStack: '$ipStack1 >> v1.txt
 !echo '++++port: '$port1 >> v1.txt
 !echo '++++vlan: "$vlan1"' >> v1.txt
 !echo '++++ipAddressMask: "$ipAddressMask1"' >> v1.txt
 !echo '++++defaultRouter0: '$defaultRouter01 >> v1.txt
 !echo '++++ipAddress: '$ipAddress1 >> v1.txt
 !echo ''  >> v1.txt
 !echo '++servicediscovery:' >> v1.txt
 !echo '++++host: localhost' >> v1.txt
 !echo '++++port: "8301"' >> v1.txt
 !echo '++++serviceArea: "NR"' >> v1.txt
 !echo '' >> v1.txt

endfunc

function obtain_vdu_gnb
 get ManagedElement=1,GNBDUFunction=1 ^gNBId$ > $gNBId1
 get ManagedElement=1,GNBDUFunction=1 gNBIdLength > $gNBIdLength1
 get ManagedElement=1,GNBDUFunction=1 gNBDUId > $gNBDUId1
 get ManagedElement=1,GNBDUFunction=1 gNBDUName > $gNBDUName1
 !echo '++gNB:' >> v1.txt
 !echo '++++gNBId: "$gNBId1"' >> v1.txt
 !echo '++++gNBIdLength: "$gNBIdLength1"' >> v1.txt
 !echo '++++gNBDUId: "$gNBDUId1"' >> v1.txt
 !echo '++++gNBDUName: "$gNBDUName1"' >> v1.txt
 !echo '++++mcc: "262"' >> v1.txt
 !echo '++++mnc: "80"' >> v1.txt
 !echo '' >> v1.txt
 get ManagedElement=1,GNBDUFunction=1,EP_F1C= remoteAddress > $remoteAddress1
 !echo '++f1c:' >> v1.txt
 !echo '++++remoteAddress: "$remoteAddress1"' >> v1.txt
endfunc

function obtain_dns_cache
 !echo '' >> v1.txt
 !echo '++dnscache:' >> v1.txt
 ma dns_group transport=1,NetworkDomain=1,DnsCache=1,dns-address-record=
 for $mo in dns_group
  get $mo serviceName > $serviceName1
  get $mo addressRecordId > $addressRecordId1
  get $mo serviceAddress$ > $ipv6IpAddress1
  get $mo serviceAddressPort > $serviceAddressPort1 
 !echo '++++- addressRecordId: '$addressRecordId1 >> v1.txt
 !echo '++++++serviceName: '$serviceName1 >> v1.txt
 !echo '++++++ipv6IpAddress: '$ipv6IpAddress1 >> v1.txt
 !echo '++++++serviceAddressPort: '$serviceAddressPort1 >> v1.txt
 done
endfunc

function obtain_nrcelldu
 !echo '' >> v1.txt
 !echo '++cell:' >> v1.txt
 ma nrcelldu1 GNBDUFunction=1,NRCellDU=
 for $mo in nrcelldu1
  get $mo ^id$ > $id1
  get $mo nRSectorCarrierRef > $ref1
  $split_separator = =
  $ref2 = split($ref1)
  $sectorCarrier1 = $ref2[6]
  get $mo ssbSubCarrierSpacing > $ssbSubCarrierSpacing1
  get $mo arfcnDL > $arfcnDL1
  get $mo arfcnUL > $arfcnUL1
  get $mo ssbPeriodicity > $ssbPeriodicity1
  get $mo ssbOffset > $ssbOffset1
  get $mo ssbFrequency > $ssbFrequency1
  get $mo ssbDuration > $ssbDuration1
  get $mo nRTAC > $nRTAC1
  get $mo bSChannelBwDL > $bSChannelBwDL1
  get $mo bSChannelBwUL > $bSChannelBwUL1
  get $mo nRPCI > $nRPCI1
  get $mo bWPRef > $temp1
  $split_separator = =
  $temp1 = $temp1 -s \xA -g
  $temp1 = $temp1 -s >>> -r = -g
  $temp1 = $temp1 -s \x20 -g
  $temp2 = split($temp1)
  $bWPRef11 = $temp2[7]
  $bWPRef22 = $temp2[12]
  
  get $mo endcUlLegSwitch > $endcUlLegSwitch1
  get $mo endcDlLegSwitch > $endcDlLegSwitch1
  get $mo endcDlNrLowQualThresh > $endcDlNrLowQualThresh1
  get $mo endcUlNrLowQualThresh > $endcUlNrLowQualThresh1
  get $mo endcUlNrQualHyst > $endcUlNrQualHyst1
  get $mo endcDlNrQualHyst > $endcDlNrQualHyst1
  get $mo puschStartPrbStrategy > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $puschStartPrbStrategy1 = $temp3[2]
   
  get $mo pdschStartPrbStrategy > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $pdschStartPrbStrategy1 = $temp3[2]
  get $mo drxEnable > $drxEnable1
  get $mo drxInactivityTimer > $drxInactivityTimer1
  get $mo drxLongCycle > $drxLongCycle1
  get $mo drxOnDurationTimer > $drxOnDurationTimer1
  get $mo pdschInDmrsSymEnabled > $pdschInDmrsSymEnabled1
  get $mo dftSOfdmPuschEnabled > $dftSOfdmPuschEnabled1
  get $mo dftSOfdmMsg3Enabled > $dftSOfdmMsg3Enabled1
  get $mo ssWithRmLteSyncSigPbchEnabled > $ssWithRmLteSyncSigPbchEnabled1
  get $mo sib1Enable > $sib1Enable1
  !echo '++++- id: "'$id1'"' >> v1.txt
  !echo '++++++sectorCarrier: "'$sectorCarrier1'"' >> v1.txt
  !echo '++++++ssbSubCarrierSpacing: "'$ssbSubCarrierSpacing1'"' >> v1.txt
  !echo '++++++arfcnDL: "'$arfcnDL1'"' >> v1.txt
  !echo '++++++ssbPeriodicity: "'$ssbPeriodicity1'"' >> v1.txt
  !echo '++++++arfcnUL: "'$arfcnUL1'"' >> v1.txt
  !echo '++++++ssbOffset: "'$ssbOffset1'"' >> v1.txt
  !echo '++++++ssbFrequency: "'$ssbFrequency1'"' >> v1.txt
  !echo '++++++ssbDuration: "'$ssbDuration1'"' >> v1.txt
  !echo '++++++nRTAC: "'$nRTAC1'"' >> v1.txt
  !echo '++++++bSChannelBwDL: "'$bSChannelBwDL1'"' >> v1.txt 
  !echo '++++++bSChannelBwUL: "'$bSChannelBwUL1'"' >> v1.txt
  !echo '++++++nRPCI: "'$nRPCI1'"' >> v1.txt
  !echo '++++++bWPRef: ["'$bWPRef11'","'$bWPRef22'"]' >> v1.txt
  
#SA support added here 

  if $sib1Enable1 = true
   !echo '++++++sib1Enable: true' >> v1.txt
   get $mo srbRLCRef > $srbRLCRef1
   $split_separator = =
   $temp = split($srbRLCRef1)
   $srbRLCRef1 = $temp[6]
   !echo '++++++srbRLCRef: ["'$srbRLCRef1'"]' >> v1.txt
   get $mo pLMNInfoList > $pLMNInfoList1
   !echo '++++++sd: "'$pLMNInfoList1[sd]'"' >> v1.txt
   !echo '++++++sst: "'$pLMNInfoList1[sst]'"' >> v1.txt
  fi
      
  
  !echo '++++++endcUlLegSwitch: "'$endcUlLegSwitch1'"' >> v1.txt
  !echo '++++++endcDlLegSwitch: "'$endcDlLegSwitch1'"' >> v1.txt
  !echo '++++++endcDlNrLowQualThresh: '$endcDlNrLowQualThresh1 >> v1.txt
  !echo '++++++endcUlNrLowQualThresh: '$endcUlNrLowQualThresh1 >> v1.txt
  !echo '++++++endcUlNrQualHyst: '$endcUlNrQualHyst1 >> v1.txt
  !echo '++++++endcDlNrQualHyst: '$endcDlNrQualHyst1 >> v1.txt
  !echo '++++++puschStartPrbStrategy: '$puschStartPrbStrategy1 >> v1.txt
  !echo '++++++pdschStartPrbStrategy: '$pdschStartPrbStrategy1 >> v1.txt
  !echo '++++++drxEnable: '$drxEnable1 >> v1.txt
  !echo '++++++drxInactivityTimer: '$drxInactivityTimer1 >> v1.txt
  !echo '++++++drxLongCycle: '$drxLongCycle1 >> v1.txt
  !echo '++++++drxOnDurationTimer: '$drxOnDurationTimer1 >> v1.txt
  $print_att = no
  if $pdschInDmrsSymEnabled1 = true
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: "pdschInDmrsSymEnabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  if $dftSOfdmPuschEnabled1 = true && $print_att = yes
   !echo '++++++++- name: "dftSOfdmPuschEnabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  if $dftSOfdmPuschEnabled1 = true && $print_att = no
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: "dftSOfdmPuschEnabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  
  if $dftSOfdmMsg3Enabled1 = true  && $print_att = yes
   !echo '++++++++- name: "dftSOfdmMsg3Enabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  if $dftSOfdmMsg3Enabled1 = true  && $print_att = no
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: "dftSOfdmMsg3Enabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  
  if $ssWithRmLteSyncSigPbchEnabled1 = true && $print_att = yes
   !echo '++++++++- name: "ssWithRmLteSyncSigPbchEnabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  if $ssWithRmLteSyncSigPbchEnabled1 = true && $print_att = no
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: "ssWithRmLteSyncSigPbchEnabled"' >> v1.txt
   !echo '++++++++++value: "true"' >> v1.txt 
  fi
  
 done
 
 

endfunc

function obtain_nr_sector_carrier
 !echo '' >> v1.txt
 !echo '++sectorCarrier:' >> v1.txt
 ma nrCarrier GNBDUFunction=1,NRSectorCarrier=
 for $mo in nrCarrier
  get $mo ^id$ > $id1
  get $mo configuredMaxTxPower > $configuredMaxTxPower1
  get $mo txDirection > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $txDirection1 = $temp3[2]
  get $mo arfcnDL > $arfcnDL1
  get $mo arfcnUL > $arfcnUL1
  get $mo bSChannelBwDL > $bSChannelBwDL1
  get $mo bSChannelBwUL > $bSChannelBwUL1
  get $mo sectorEquipmentFunctionRef > $temp1
  $split_separator = =
  $temp2 = split($temp1)
  $sectorequipmentfunc1 = $temp2[4]
  get $mo essScLocalId > $ess1
  if $ess1 ~ [0-9]
   get $mo essScPairId > $essScPairId1
   get $mo essScLocalId > $essScLocalId1
   get $mo essMbsfnSubframeConfig > $essMbsfnSubframeConfig1
  fi
  
  !echo '++++- id: "'$id1'"' >> v1.txt
  !echo '++++++configuredMaxTxPower: "'$configuredMaxTxPower1'"' >> v1.txt
  !echo '++++++txDirection: '$txDirection1 >> v1.txt
  !echo '++++++arfcnDL: "'$arfcnDL1'"' >> v1.txt
  !echo '++++++arfcnUL: "'$arfcnUL1'"' >> v1.txt
  !echo '++++++bSChannelBwDL: "'$bSChannelBwDL1'"' >> v1.txt
  !echo '++++++bSChannelBwUL: "'$bSChannelBwUL1'"' >> v1.txt
  !echo '++++++sectorequipmentfunc: "'$sectorequipmentfunc1'"' >> v1.txt
  $print_att = no
  if $ess1 ~ [0-9]
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: essScPairId' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ' $essScPairId1 >> v1.txt  
   !echo '++++++++- name: essScLocalId' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ' $essScLocalId1 >> v1.txt
   !echo '++++++++- name: essMbsfnSubframeConfig' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ''"'$essMbsfnSubframeConfig1'"' >> v1.txt
  fi
  
  get $mo dlAvailableCrbs > $dlAvailableCrbs1
  if $dlAvailableCrbs1 ~ [1-9] && $print_att = yes
   !echo '++++++++- name: dlAvailableCrbs' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ''"'$dlAvailableCrbs1'"' >> v1.txt
  fi
  if $dlAvailableCrbs1 ~ [1-9] && $print_att = no
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: dlAvailableCrbs' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ''"'$dlAvailableCrbs1'"' >> v1.txt
  fi
  get $mo ulAvailableCrbs > $ulAvailableCrbs1
  if $ulAvailableCrbs1 ~ [1-9] && $print_att = yes
   !echo '++++++++- name: ulAvailableCrbs' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ''"'$ulAvailableCrbs1'"' >> v1.txt
  fi
  if $ulAvailableCrbs1 ~ [1-9] && $print_att = no
   !echo '++++++attributes:' >> v1.txt
   $print_att = yes
   !echo '++++++++- name: ulAvailableCrbs' >> v1.txt
   !echo '++++++++++scheme: ''"'"'"'urn:rdns:com:ericsson:oammodel:ericsson-nrsectorcarrier-vdu-ext'"'"'"' >> v1.txt
   !echo '++++++++++value: ''"'$ulAvailableCrbs1'"' >> v1.txt
  fi
 done
endfunc
 
function obtain_bwp
 !echo '' >> v1.txt
 !echo '++bwp:' >> v1.txt
 ma bwp_group GNBDUFunction=1,BWP=
 for $mo in bwp_group
  get $mo ^id$ > $id1
  get $mo bwpContext > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $split_separator = \x20
  $temp3 = split($temp2)
  $bwpContext1 = $temp3[2]
  get $mo isInitialBwp > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $split_separator = \x20
  $temp3 = split($temp2)
  $isInitialBwp1 = $temp3[2]
  get $mo cyclicPrefix > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $split_separator = \x20
  $temp3 = split($temp2)
  $cyclicPrefix1 = $temp3[2]
  get $mo startRB > $startRB1
  get $mo numberOfRBs > $numberOfRBs1
  get $mo pZeroUePuschOffset256Qam > $pZeroUePuschOffset256Qam1
  get $mo pZeroNomPuschGrant > $pZeroNomPuschGrant1
  get $mo pZeroNomPucch > $pZeroNomPucch1
  get $mo enable256QAM > $enable256QAM1
  !echo '++++- id: "'$id1'"' >> v1.txt
  !echo '++++++bwpContext: "'$bwpContext1'"' >> v1.txt
  !echo '++++++isInitialBwp: "'$isInitialBwp1'"' >> v1.txt
  !echo '++++++cyclicPrefix: "'$cyclicPrefix1'"' >> v1.txt
  !echo '++++++startRB: '$startRB1 >> v1.txt
  !echo '++++++numberOfRBs: '$numberOfRBs1 >> v1.txt
  !echo '++++++pZeroUePuschOffset256Qam: '$pZeroUePuschOffset256Qam1 >> v1.txt
  !echo '++++++pZeroNomPuschGrant: '$pZeroNomPuschGrant1 >> v1.txt
  !echo '++++++pZeroNomPucch: '$pZeroNomPucch1 >> v1.txt
  !echo '++++++enable256QAM: "'$enable256QAM1'"' >> v1.txt
 done
endfunc 

function obtain_drbRLCRef
 !echo '' >> v1.txt
 !echo '++drbRLCRef:' >> v1.txt
 ma drb_group GNBDUFunction=1,UeCC=.*,RadioLinkControl=.*,DrbRLC=
 for $mo in drb_group
  get $mo ^id$ > $id1
  get $mo dlPollPdu > $dlPollPdu1
  get $mo sNLength > $sNLength1
  get $mo tReassemblyUl > $tReassemblyUl1
  get $mo tStatusProhibitDl > $tStatusProhibitDl1
  get $mo tReassemblyDl > $tReassemblyDl1
  get $mo tStatusProhibitUl > $tStatusProhibitUl1
  get $mo tPollRetransmitUl > $tPollRetransmitUl1
  get $mo dlMaxRetxThreshold > $dlMaxRetxThreshold1
  get $mo tPollRetransmitDl > $tPollRetransmitDl1
  get $mo ulMaxRetxThreshold > $ulMaxRetxThreshold1
  get $mo ulPollPdu > $ulPollPdu1
  !echo '++++- id: "'$id1'"' >> v1.txt
  !echo '++++++dlPollPdu: '$dlPollPdu1 >> v1.txt
  !echo '++++++sNLength: '$sNLength1 >> v1.txt
  !echo '++++++tReassemblyUl: '$tReassemblyUl1 >> v1.txt
  !echo '++++++tStatusProhibitDl: '$tStatusProhibitDl1 >> v1.txt
  !echo '++++++tReassemblyDl: '$tReassemblyDl1 >> v1.txt
  !echo '++++++tStatusProhibitUl: '$tStatusProhibitUl1 >> v1.txt
  !echo '++++++tPollRetransmitUl: '$tPollRetransmitUl1 >> v1.txt
  !echo '++++++dlMaxRetxThreshold: '$dlMaxRetxThreshold1 >> v1.txt
  !echo '++++++tPollRetransmitDl: '$tPollRetransmitDl1 >> v1.txt
  !echo '++++++ulMaxRetxThreshold: '$ulMaxRetxThreshold1 >> v1.txt
  !echo '++++++ulPollPdu: '$ulPollPdu1 >> v1.txt
 done
endfunc

function obtain_schedulingProfileRef
 !echo '' >> v1.txt
 !echo '++schedulingProfileRef:' >> v1.txt
 ma sch_group ,ManagedElement=1,GNBDUFunction=.*,UeCC=.*,SchedulingProfile=
 for $mo in sch_group
  get $mo ^id$ > $id1
  get $mo relativePriorityMode > $temp1
  $temp2 = `echo "$temp1" | tr -d '()'`
  $split_separator = \x20
  $temp3 = split($temp2)
  $split_separator = \x20
  $temp3 = split($temp2)
  $relativePriorityMode1 = $temp3[2]
  get $mo relativePriority$ > $relativePriority1
  !echo '++++- id: "'$id1'"' >> v1.txt
  !echo '++++++relativePriorityMode: '$relativePriorityMode1 >> v1.txt
  !echo '++++++relativePriority: '$relativePriority1 >> v1.txt
 done
endfunc

function obtain_srbRLCRef
 !echo '' >> v1.txt
 !echo '++srbRLCRef:' >> v1.txt
 ma srb_group GNBDUFunction=1,UeCC=.*,RadioLinkControl=.*,SrbRLC=.*
 for $mo in srb_group
  get $mo ^id$ > $id1
  get $mo ^dlMaxRetxThreshold$ > $dlMaxRetxThreshold1
  get $mo ^tPollRetransmitDl$ > $tPollRetransmitDl1
  get $mo ^tPollRetransmitUl$ > $tPollRetransmitUl1
  get $mo ^tReassemblyDl$ > $tReassemblyDl1
  get $mo ^tReassemblyUl$ > $tReassemblyUl1
  get $mo ^ulMaxRetxThreshold$ > $ulMaxRetxThreshold1
  !echo '++++- id: "'$id1'"' >> v1.txt  
  !echo '++++++dlMaxRetxThreshold: '$dlMaxRetxThreshold1	 >> v1.txt
  !echo '++++++tPollRetransmitDl: '$tPollRetransmitDl1 >> v1.txt  
  !echo '++++++tPollRetransmitUl: '$tPollRetransmitUl1 >> v1.txt
  !echo '++++++tReassemblyDl: '$tReassemblyDl1 >> v1.txt
  !echo '++++++tReassemblyUl: '$tReassemblyUl1 >> v1.txt
  !echo '++++++ulMaxRetxThreshold: '$ulMaxRetxThreshold1 >> v1.txt
 done
endfunc
  
function obtain_qosMapping
 !echo '' >> v1.txt
 !echo '++qosMapping:' >> v1.txt
 ma qos_group ManagedElement=1,GNBDUFunction=1,QosPriorityMapping=
 for $mo in qos_group
  get $mo  ^id$ > $id1
  !echo '++++id: '$id1 >> v1.txt
  $temp1 = ldn($mo)
  obtain_domain_map $temp1 
 done
endfunc

function obtain_domain_map

 ma domain_group $1,PriorityDomainMapping=
 
 # needed to unset because cause problems with linux awk
 unset $0 
 
 !echo '++++domainMapping:' >> v1.txt
 for $mo in domain_group
  get $mo  ^id$ > $id1
  get $mo priorityDomain > $priorityDomain1
  get $mo priorityLevelsList > $temp1
  $split_separator = =
  $temp2 = split($temp1)
  $temp3 = $temp2[2] -s \x20 -r "," -g
  $temp41 = `echo '$temp3' | awk '{print substr ($0,3,length($0)-4)}'`
  !echo '++++++id: '$id1  >> v1.txt
  !echo '++++++priorityDomain: '$priorityDomain1 >> v1.txt
  !echo '++++++levelsList: [$temp41]' >> v1.txt
 done
 !echo '' >> v1.txt
 get GNBDUFunction=1,DU5qiTable=1 default5qiTable > $default5qiTable1
 !echo '++duqiTable:' >> v1.txt
 !echo '++++default5qiTable: '$default5qiTable1 >> v1.txt
 !echo '' >> v1.txt
 
 #Value below hardwired need to check in the AD guide how to obtain
 !echo '++enableQitable: true' >> v1.txt

endfunc

function obtain_quitable

# I think this format is faulty :  schedulingProfileRef: ["1","2"] there must be only one reference
 
 !echo '' >> v1.txt
 !echo '++qitable:' >> v1.txt
 ma quitable_group  ManagedElement=1,GNBDUFunction=1,DU5qiTable=1,DU5qi=
 for $mo in quitable_group
  get $mo ^id$ > $id1
  get $mo profile5qi > $profile5qi1
  get $mo logicalChannelGroupId > $logicalChannelGroupId1
  get $mo packetDelayBudget > $packetDelayBudget1
  get $mo priorityLevel > $priorityLevel1
  $split_separator = =
  get $mo schedulingProfileRef > $temp1
  $temp2 = split($temp1)
  $schedulingProfileRef1 = $temp2[5]
  get $mo drbRLCRef > $temp1
  $temp2 = split($temp1)
  $drbRLCRef1 = $temp2[6]
  !echo '++++- id: "'$id1'"' >> v1.txt
  !echo '++++++profile5qi: '$profile5qi1 >> v1.txt
  !echo '++++++logicalChannelGroupId: '$logicalChannelGroupId1 >> v1.txt
  !echo '++++++packetDelayBudget: '$packetDelayBudget1 >> v1.txt
  !echo '++++++priorityLevel: '$priorityLevel1 >> v1.txt
  !echo '++++++schedulingProfileRef: ["$schedulingProfileRef1"]' >> v1.txt
  !echo '++++++drbRLCRef: ["$drbRLCRef1"]' >> v1.txt
 done
endfunc

function obtain_vcu_gnb
 get ManagedElement=1,GNBCUCPFunction=1 ^gNBId$ > $gNBId1
 get ManagedElement=1,GNBCUCPFunction=1 gNBIdLength > $gNBIdLength1
 get ManagedElement=1,GNBCUCPFunction=1 gNBCUName > $gNBCUName1
 get ManagedElement=1,GNBCUCPFunction=1 ^pLMNId$ > $plmn1
 !echo '++gNB:' >> v1.txt
 !echo '++++gNBId: "'$gNBId1'"' >> v1.txt
 !echo '++++gNBIdLength:  "'$gNBIdLength1'"'  >> v1.txt
 !echo '++++gNBCUName: "'$gNBCUName1'"' >> v1.txt
 !echo '++++mcc: "'$plmn1[mcc]'"' >> v1.txt
 !echo '++++mnc: "'$plmn1[mnc]'"' >> v1.txt
endfunc

function obtain_interCA2
 !echo '++++interCA:' >> v1.txt 
 for $mo in InterCaRelations
  $split_separator = ,
  $temp = ldn($mo)
  $temp2 = split($temp)  
  get $temp2[4] cellLocalId > $cellLocalId1
  get $mo adjacentNRCellRef > $temp
  $temp2 = split($temp)  
  get $temp2[4] ^gNBId$ > $extGNBId1
  get $temp2[5] cellLocalId > $adjacentLocalId1
  get $mo coverageIndicator > $temp
  if $temp ~ 1
   $value1 = COVERS
  fi
  if $temp ~ 2
   $value1 = OVERLAP
  fi
  !echo '++++++- cellLocalId: "'$cellLocalId1'"' >> v1.txt
  !echo '++++++++adjacentLocalId: "'$adjacentLocalId1'"' >> v1.txt
  !echo '++++++++extGNBId: "'$extGNBId1'"' >>  v1.txt
  !echo '++++++++nrCellRelation:' >>  v1.txt
  !echo '++++++++++attributes:' >>  v1.txt
  !echo '++++++++++++- name: "coverageIndicator"' >> v1.txt
  !echo '++++++++++++++value: "'$value1'"' >> v1.txt
 done
endfunc
  
function obtain_interCA1
 ma InterCaRelations NRCellRelation= adjacentNRCellRef ExternalNRCellCu=
 pr InterCaRelations
 if $nr_of_mos > 0
  obtain_interCA2
 fi
endfunc

function obtain_external_eutrancell_2
 !echo '' >> v1.txt
 !echo '++ExternalEUtranCell:' >> v1.txt
 for $mo in eutrancell_group
  get $mo ^id$ > $id1
  get $mo cellLocalId > $cellLocalId1
  $temp = ldn($mo)
  $temp2 = split($temp)
  get $temp2[4] ^id$ > $externalENBFunctionId1
  !echo '++++- id: "'$id1 >> v1.txt
  !echo '++++++externalENBFunctionId: "'$externalENBFunctionId1 >> v1.txt
  !echo '++++++cellLocalId: "'$cellLocalId1 >> v1.txt
 done
endfunc

function obtain_external_eutrancell_1
 ma eutrancell_group ExternalEUtranCell=
 pr eutrancell_group
 if $nr_of_mos > 0
  obtain_external_eutrancell_2
 fi
endfunc

function obtain_eutrancellRelations
 ma e_rel GNBCUCPFunction=1,NRCellCU=.*,EUtranCellRelation=
 pr e_rel
 if $nr_of_mos > 0
  !echo '' >> v1.txt 
  !echo '++EUtranCellRelation:' >> v1.txt
  for $mo in e_rel
   $split_separator = ,
   $temp = ldn($mo)
   $temp2 = split($temp)
   get $temp2[5] ^id$ > $id1
   get $temp2[4] cellLocalId > $cellLocalId1
   get $mo adjacentCell > $adjacentCell1
   !echo '++++- id: "'$id1'"' >> v1.txt
   !echo '++++++adjacentCell: "'$adjacentCell1'"' >> v1.txt
   !echo '++++++cellLocalId: "'$cellLocalId1'"' >> v1.txt
  done
 fi
endfunc
 
function quitable_VCU
 !echo '' >> v1.txt 
 !echo '++qitable:' >> v1.txt
 !echo '++++number: 9'  >> v1.txt
 get QciProfileEndcConfigExt= initialUplinkConf > $temp
 if $temp ~ SCG
 !echo '++++initialUplinkConf: SCG'  >> v1.txt
 fi
 get QciProfileEndcConfigExt= ulDataSplitThreshold$ > $temp
 if $temp ~  [0-9]
  !echo '++++ulDataSplitThreshold: '$temp   >> v1.txt
 fi
endfunc
 
 
#########################################################
#               Main program starts below               #
#########################################################

lt all
$enbnode = no
pr ^enodebfunction=1
if $nr_of_mos > 0
 $enbnode = yes
 $apple = readinput(It seems the script is running on msrbs, hit ENTER)
 $date = `date "+%Y-%m-%d %H:%M:%S"`
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '# This file was generated by CloneToYaml tool '$version >> v1.txt
 !echo '# Generation date: '$date >> v1.txt
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '' >> v1.txt
 obtain_oam_data
 obtain_s1
 obtain_rilinks_from_RGW_to_RU
 obtain_sector_equipment
 obtain_eutrancell
 obtain_eutranfreq
 obtain_eutranfreqrelation1
 obtain_gutransignal
 obtain_ExternalGUtranCell
 obtain_gutranfreqrel
 obtain_gutrancellrelation
 obtain_rgw
 obtain_tls
 obtain_fgw_e5l_enb_exgnb
 obtain_boards
 
 !cat v1.txt|sed 's,+, ,g' > $path1$file1.yaml
 !rm v1.txt
fi

pr DnsCache
if $nr_of_mos > 0
 $apple = readinput(It seems the script is running on VDU, hit ENTER)
 $date = `date "+%Y-%m-%d %H:%M:%S"`
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '# This file was generated by CloneToYaml tool '$version >> v1.txt
 !echo '# Generation date: '$date >> v1.txt
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '' >> v1.txt
 obtain_vdu_gnb
 obtain_dns_cache
 obtain_nrcelldu
 obtain_nr_sector_carrier
 obtain_bwp
 obtain_drbRLCRef
 obtain_schedulingProfileRef
 obtain_srbRLCRef
 obtain_qosMapping
 obtain_quitable
 $date = `date "+%Y-%m-%d %H:%M:%S"`
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '# File generated successfully' >> v1.txt
 !echo '# Finishing date: '$date >> v1.txt
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '' >> v1.txt
 !cat v1.txt|sed 's,+, ,g' > $path1$file1.yaml
 !rm v1.txt
 fi
 
pr ^nrcellcu=
if $nr_of_mos > 0
 $apple = readinput(It seems the script is running on VCU UP, hit ENTER)
 $date = `date "+%Y-%m-%d %H:%M:%S"`
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '# This file was generated by CloneToYaml tool '$version >> v1.txt
 !echo '# Generation date: '$date >> v1.txt
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '' >> v1.txt
 obtain_vcu_gnb
 obtain_interCA1
 obtain_external_eutrancell_1
 obtain_eutrancellRelations
 quitable_VCU
 $date = `date "+%Y-%m-%d %H:%M:%S"`
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '# File generated successfully' >> v1.txt
 !echo '# Finishing date: '$date >> v1.txt
 !echo '#--------------------------------------------------------------' >> v1.txt
 !echo '' >> v1.txt
 !cat v1.txt|sed 's,+, ,g' > $path1$file1.yaml
 !rm v1.txt
fi

